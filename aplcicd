#!/bin/bash
# APLCICD - Complete Self-Improving APL CI/CD System
# Dyalog APL Forge Contest 2025 - Single Script Solution

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Script metadata
SCRIPT_VERSION="2.0.0"
SCRIPT_NAME="APLCICD"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color

# Get script directory for relative paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Logging functions
log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

log_header() {
    echo -e "${PURPLE}🚀 $1${NC}"
    echo -e "${PURPLE}$(printf '=%.0s' $(seq 1 ${#1}))${NC}"
}

# Find Dyalog APL installation
find_dyalog() {
    local dyalog_path=""
    
    # Try environment variable first
    if [[ -n "${DYALOG:-}" ]] && command -v "$DYALOG" &> /dev/null; then
        dyalog_path="$DYALOG"
    # Try common system paths
    elif command -v dyalog &> /dev/null; then
        dyalog_path="dyalog"
    # Try macOS installation
    elif [[ -x "/Applications/Dyalog-19.0.app/Contents/Resources/Dyalog/mapl" ]]; then
        dyalog_path="/Applications/Dyalog-19.0.app/Contents/Resources/Dyalog/mapl"
    # Try Linux installation
    elif [[ -x "/opt/mdyalog/19.0/64/unicode/mapl" ]]; then
        dyalog_path="/opt/mdyalog/19.0/64/unicode/mapl"
    # Try other common locations
    elif [[ -x "/usr/local/bin/mapl" ]]; then
        dyalog_path="/usr/local/bin/mapl"
    elif [[ -x "/usr/bin/mapl" ]]; then
        dyalog_path="/usr/bin/mapl"
    fi
    
    echo "$dyalog_path"
}

# Kill any existing Dyalog processes to ensure clean state
restart_dyalog() {
    log_info "Restarting Dyalog APL for clean execution..."
    
    # More robust process cleanup
    find_and_kill_dyalog
    
    # Clean up any APL workspace files
    find "$SCRIPT_DIR" -name "aplcore" -delete 2>/dev/null || true
    find "$SCRIPT_DIR" -name "*.dws" -delete 2>/dev/null || true
    
    log_success "Dyalog environment cleaned"
}

# Improved process cleanup with waiting
find_and_kill_dyalog() {
    if pgrep -f "dyalog\|mapl\|aplcicd" &> /dev/null; then
        log_warning "Terminating existing APL processes..."
        pkill -f "dyalog\|mapl\|aplcicd" 2>/dev/null || true
        sleep 3
        
        # Wait for processes to actually die
        local wait_count=0
        while pgrep -f "dyalog\|mapl" >/dev/null 2>&1; do
            if [[ $wait_count -ge 10 ]]; then
                log_warning "Force killing stubborn processes..."
                pkill -9 -f "dyalog\|mapl" 2>/dev/null || true
                break
            fi
            sleep 1
            wait_count=$((wait_count + 1))
        done
    fi
}

# Robust APL command execution with retry logic and exponential backoff
run_apl() {
    local apl_code="$1"
    local description="${2:-Running APL command}"
    local max_retries="${3:-2}"
    local timeout="${4:-30}"
    local retry_count=0
    
    while [[ $retry_count -le $max_retries ]]; do
        log_info "$description (attempt $((retry_count + 1))/$((max_retries + 1)))..."
        
        # Restart Dyalog on retries
        if [[ $retry_count -gt 0 ]]; then
            restart_dyalog
        fi
        
        # Execute APL code with timeout and improved error detection
        local output
        if output=$(timeout "$timeout" bash -c "echo '$apl_code' | '$DYALOG_PATH' 2>&1"); then
            # Check for success indicators and absence of error indicators
            if echo "$output" | grep -q "APLCICD.*System Status\|✅.*ready\|🚀.*APLCICD\|✅.*loaded\|🎵.*Vibe" && \
               ! echo "$output" | grep -q "ERROR\|SYNTAX ERROR\|VALUE ERROR\|WS FULL\|INTERRUPT"; then
                log_success "$description completed"
                return 0
            fi
        fi
        
        retry_count=$((retry_count + 1))
        if [[ $retry_count -le $max_retries ]]; then
            # Exponential backoff: 2^retry_count seconds
            local wait_time=$((2 ** retry_count))
            log_warning "$description failed, retrying in ${wait_time}s..."
            sleep "$wait_time"
        fi
    done
    
    log_error "$description failed after $((max_retries + 1)) attempts"
    return 1
}

# Validate demo environment before running
validate_demo_environment() {
    log_info "Validating demo environment..."
    
    # Check all required files exist
    local required_files=("src/APLCICD.dyalog" "src/vibe.dyalog" "src/Core.dyalog" "config/default.json")
    for file in "${required_files[@]}"; do
        if [[ ! -e "$file" ]]; then
            log_error "Required file missing: $file"
            return 1
        fi
    done
    
    # Check required directories exist
    local required_dirs=("src" "web" "config")
    for dir in "${required_dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            log_error "Required directory missing: $dir"
            return 1
        fi
    done
    
    # Test Dyalog responds
    log_info "Testing Dyalog APL response..."
    if ! echo "⎕←'APLCICD_TEST'" | timeout 10 "$DYALOG_PATH" 2>/dev/null | grep -q "APLCICD_TEST"; then
        log_error "Dyalog APL not responding correctly"
        return 1
    fi
    
    # Check source files are valid APL
    local apl_files=(src/*.dyalog)
    for file in "${apl_files[@]}"; do
        if [[ -f "$file" ]] && ! grep -q ":Namespace\|∇" "$file"; then
            log_warning "APL file may be invalid: $file"
        fi
    done
    
    log_success "Demo environment validation passed"
    return 0
}

# Initialize system and check requirements
initialize() {
    log_header "APLCICD v$SCRIPT_VERSION - Self-Improving APL CI/CD System"
    echo "Dyalog APL Forge Contest 2025"
    echo ""
    
    # Find Dyalog
    DYALOG_PATH=$(find_dyalog)
    if [[ -z "$DYALOG_PATH" ]]; then
        log_error "Dyalog APL not found!"
        echo "Please install Dyalog APL 19.0+ or set DYALOG environment variable"
        echo "Download from: https://www.dyalog.com/download-zone.htm"
        exit 1
    fi
    
    log_success "Found Dyalog APL: $DYALOG_PATH"
    
    # Validate demo environment
    validate_demo_environment
    
    # Ensure directories exist
    mkdir -p web logs config
    
    # Clean start
    restart_dyalog
    
    log_success "System initialized"
}

# Start web server and launch interactive dashboard
generate_dashboard() {
    log_header "Starting APLCICD Web Dashboard"
    
    log_info "Initializing APLCICD and starting web server..."
    
    # APL code to start web server and dashboard
    local apl_webserver_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
⎕←''
⎕←'🌐 APLCICD Web Server & Dashboard'
⎕←'================================='
⎕←'Starting web server on port 8081...'
server_result ← APLCICD.WebServer.Start 8081
:If APLCICD.WebServer.server_running
    ⎕←'✅ Web server started successfully'
    ⎕←'📊 Dashboard: http://localhost:8081'
    ⎕←'🎵 Live vibe compression controls available'
    ⎕←'⚡ Interactive toggle, real git data, system metrics'
    ⎕←''
    ⎕←'🌐 Opening dashboard in browser...'
    ⎕DL 2
    {} ⎕SH 'open http://localhost:8081'
    ⎕←'✅ Dashboard opened - server running'
    ⎕←''
    ⎕←'Dashboard Features:'
    ⎕←'• Live vibe compression toggle'
    ⎕←'• Real git repository data'
    ⎕←'• Interactive system controls'
    ⎕←'• Auto-refreshing metrics'
    ⎕←''
    ⎕←'Press Ctrl+C to stop server'
    ⍝ Keep server running
    :While APLCICD.WebServer.server_running
        ⎕DL 1
    :EndWhile
:Else
    ⎕←'⚠️  Web server failed - opening file-based dashboard'
    dashboard_path ← ⊃⎕SH 'pwd'
    {} ⎕SH 'open file://',dashboard_path,'/web/dashboard.html'
    ⎕←'📁 File-based dashboard opened'
:EndIf"
    
    if run_apl "$apl_webserver_code" "Web dashboard startup" 15; then
        log_success "Dashboard server completed"
    else
        log_warning "APL web server failed - trying file-based dashboard"
        open_dashboard
    fi
}

# Open dashboard in browser
open_dashboard() {
    local dashboard_path="$SCRIPT_DIR/web/dashboard.html"
    
    if [[ ! -f "$dashboard_path" ]]; then
        log_error "Dashboard file not found: $dashboard_path"
        return 1
    fi
    
    log_info "Opening dashboard in browser..."
    
    # Try different platform-specific openers
    if command -v open &> /dev/null; then
        open "$dashboard_path" && log_success "Dashboard opened (macOS)"
    elif command -v xdg-open &> /dev/null; then
        xdg-open "$dashboard_path" && log_success "Dashboard opened (Linux)"
    elif command -v start &> /dev/null; then
        start "$dashboard_path" && log_success "Dashboard opened (Windows)"
    else
        log_warning "Could not auto-open browser"
        echo "📂 Please open manually: file://$dashboard_path"
    fi
}

# Run APL CI/CD demo
run_demo() {
    log_header "Contest Demonstration"
    
    local apl_demo_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.Demo
⎕OFF"
    
    run_apl "$apl_demo_code" "Contest demonstration"
}

# Run AI detection
run_ai_detection() {
    local text="${1:-}"
    
    if [[ -z "$text" ]]; then
        log_error "Usage: $0 ai \"text to analyze\""
        echo "Example: $0 ai \"Generated using Claude AI\""
        exit 1
    fi
    
    log_header "AI Detection Analysis"
    
    local apl_ai_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
result ← APLCICD.AI '$text'
⎕←'🤖 AI Detection Result: ',⍕result
⎕←'📊 Classification: ',(result>0.3)⊃'Human-Written' 'AI-Generated'
⎕←'🎯 Ultra-concise algorithm: 18 characters'
⎕OFF"
    
    run_apl "$apl_ai_code" "AI detection analysis"
}

# Run performance benchmark
run_benchmark() {
    log_header "Performance Benchmark"
    
    local apl_benchmark_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.Performance
⎕OFF"
    
    run_apl "$apl_benchmark_code" "Performance benchmark"
}

# Run system status check
run_status() {
    log_header "System Status"
    
    local apl_status_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.Status
⎕OFF"
    
    run_apl "$apl_status_code" "System status check"
}

# Run complete CI/CD pipeline
run_pipeline() {
    log_header "CI/CD Pipeline Execution"
    
    local apl_pipeline_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.TestCI
⎕OFF"
    
    run_apl "$apl_pipeline_code" "CI/CD pipeline execution"
}

# Run real implementation demo
run_real_demo() {
    log_header "Real Implementation Demo"
    
    local apl_real_demo_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.RealDemo
⎕OFF"
    
    run_apl "$apl_real_demo_code" "Real implementation demo"
}

# Self-optimization process
run_self_optimize() {
    log_header "Self-Optimization Process"
    
    local apl_optimize_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.SelfOptimize
⎕OFF"
    
    run_apl "$apl_optimize_code" "Self-optimization process"
}

run_vibe_demo() {
    log_header "Vibe Coding Demonstration"
    
    local apl_vibe_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.LoadAdvancedModules
APLCICD.VibeDemo
⎕OFF"
    
    run_apl "$apl_vibe_code" "Vibe coding demonstration"
}

run_recursive_demo() {
    log_header "Recursive Self-Testing"
    
    local apl_recursive_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.LoadAdvancedModules
APLCICD.RecursiveDemo
⎕OFF"
    
    run_apl "$apl_recursive_code" "Recursive self-testing"
}

run_competition_server() {
    log_header "Competition Web Server"
    
    local apl_server_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.LoadAdvancedModules
APLCICD.CompetitionServer
⎕OFF"
    
    run_apl "$apl_server_code" "Competition web server"
}

run_complete_competition_demo() {
    log_header "Complete Competition Demonstration"
    
    local apl_complete_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.LoadAdvancedModules
result ← APLCICD.CompleteCompetitionDemo
⎕←'🏆 Competition demonstration complete!'
⎕OFF"
    
    run_apl "$apl_complete_code" "Complete competition demo"
}

# Complete system demonstration (combination of key features)
run_complete_demo() {
    log_header "Complete APLCICD System Demonstration"
    
    log_info "Running comprehensive system demo..."
    
    # 1. System status
    run_status
    echo ""
    
    # 2. AI detection demo
    log_info "Testing AI detection..."
    run_ai_detection "As an AI assistant, I can help you implement this feature"
    echo ""
    
    # 3. Real implementation demo
    run_real_demo
    echo ""
    
    # 4. Generate dashboard
    generate_dashboard
    echo ""
    
    # 5. Run pipeline test
    run_pipeline
    
    log_success "Complete demonstration finished!"
    echo ""
    echo "🎯 Key Achievements Demonstrated:"
    echo "   ✅ Ultra-concise AI detection (18 characters)"
    echo "   ✅ Self-improving CI/CD pipeline"
    echo "   ✅ Real-time dashboard with live data"
    echo "   ✅ Meta-programming capabilities"
    echo "   ✅ Production-ready architecture"
    echo "   ✅ Zero-mock implementation"
}

# Show help
show_help() {
    cat << EOF
🚀 APLCICD v$SCRIPT_VERSION - Self-Improving APL CI/CD System
===========================================================
Dyalog APL Forge Contest 2025

Usage: ./aplcicd [command] [options]

Essential Commands:
  complete          - Full system demonstration (recommended)
  demo              - Contest demonstration
  dashboard         - Start web server and launch interactive dashboard
  ai TEXT           - Detect AI in text (ultra-concise algorithm)

Pipeline Commands:
  pipeline          - Run complete CI/CD pipeline
  realdemo          - Real implementation demo (no mocks)
  selfoptimize      - Self-optimization and improvement
  status            - System status and health check
  benchmark         - Performance benchmark

Competition Commands:
  vibe              - Vibe coding compression demonstration
  recursive         - Recursive self-testing demonstration
  competition       - Launch competition web server
  complete-demo     - Complete competition demonstration

Examples:
  ./aplcicd complete                              # Full demo
  ./aplcicd dashboard                             # Launch dashboard
  ./aplcicd ai "Generated using Claude AI"        # AI detection
  ./aplcicd demo                                  # Contest demo
  ./aplcicd pipeline                              # CI/CD test
  ./aplcicd complete-demo                         # Competition demo
  ./aplcicd vibe                                  # Code compression demo

Key Features:
  🤖 Ultra-concise AI detection (18 characters)
  🔄 Self-improving CI/CD pipeline automation
  🛡️  Comprehensive security & quality analysis
  📊 Real-time performance monitoring & optimization
  🌐 Live web dashboard with real metrics
  🔧 Meta-programming and recursive self-analysis
  📚 APL-native Git integration
  ✅ Zero-mock implementation (all functionality real)

System Requirements:
  • Dyalog APL 19.0+ (automatically detected)
  • Unix-like system (macOS/Linux/WSL)
  • Git (for repository operations)

Quick Start:
  1. chmod +x aplcicd
  2. ./aplcicd complete
  3. Open the generated dashboard in your browser

For Interactive Use:
  ⎕FIX'file://src/APLCICD.dyalog'
  APLCICD.Initialize
  APLCICD.Demo

Repository: https://github.com/jcfield-boop/aplipeline
Contest: Dyalog APL Forge 2025 - Vibe Coding Category
EOF
}

# Main command processing
main() {
    # Initialize system
    initialize
    
    # Parse command
    local cmd="${1:-help}"
    
    case "$cmd" in
        "complete"|"full")
            run_complete_demo
            ;;
        "demo")
            run_demo
            ;;
        "dashboard")
            generate_dashboard
            ;;
        "ai")
            run_ai_detection "${2:-}"
            ;;
        "benchmark")
            run_benchmark
            ;;
        "status")
            run_status
            ;;
        "pipeline")
            run_pipeline
            ;;
        "realdemo")
            run_real_demo
            ;;
        "selfoptimize")
            run_self_optimize
            ;;
        "vibe")
            run_vibe_demo
            ;;
        "recursive")
            run_recursive_demo
            ;;
        "competition")
            run_competition_server
            ;;
        "complete-demo")
            run_complete_competition_demo
            ;;
        "restart")
            restart_dyalog
            log_success "Dyalog APL restarted"
            ;;
        "help"|"-h"|"--help"|*)
            show_help
            ;;
    esac
}

# Handle script interruption
trap 'log_warning "Script interrupted"; exit 1' INT TERM

# Run main function with all arguments
main "$@"