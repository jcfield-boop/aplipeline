#!/bin/bash
# APLCICD - Complete Self-Improving APL CI/CD System
# Dyalog APL Forge Contest 2025 - Single Script Solution

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Script metadata
SCRIPT_VERSION="2.0.0"
SCRIPT_NAME="APLCICD"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color

# Get script directory for relative paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Logging functions
log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

log_header() {
    echo -e "${PURPLE}🚀 $1${NC}"
    echo -e "${PURPLE}$(printf '=%.0s' $(seq 1 ${#1}))${NC}"
}

# Find Dyalog APL installation
find_dyalog() {
    local dyalog_path=""
    
    # Try environment variable first
    if [[ -n "${DYALOG:-}" ]] && command -v "$DYALOG" &> /dev/null; then
        dyalog_path="$DYALOG"
    # Try macOS installation first (full path more reliable than alias)
    elif [[ -x "/Applications/Dyalog-19.0.app/Contents/Resources/Dyalog/mapl" ]]; then
        dyalog_path="/Applications/Dyalog-19.0.app/Contents/Resources/Dyalog/mapl"
    # Try common system paths  
    elif command -v dyalog &> /dev/null; then
        dyalog_path="dyalog"
    # Try Linux installation
    elif [[ -x "/opt/mdyalog/19.0/64/unicode/mapl" ]]; then
        dyalog_path="/opt/mdyalog/19.0/64/unicode/mapl"
    # Try other common locations
    elif [[ -x "/usr/local/bin/mapl" ]]; then
        dyalog_path="/usr/local/bin/mapl"
    elif [[ -x "/usr/bin/mapl" ]]; then
        dyalog_path="/usr/bin/mapl"
    fi
    
    echo "$dyalog_path"
}

# Kill any existing Dyalog processes to ensure clean state
restart_dyalog() {
    log_info "Restarting Dyalog APL for clean execution..."
    
    # More robust process cleanup
    find_and_kill_dyalog
    
    # Clean up any APL workspace files
    find "$SCRIPT_DIR" -name "aplcore" -delete 2>/dev/null || true
    find "$SCRIPT_DIR" -name "*.dws" -delete 2>/dev/null || true
    
    log_success "Dyalog environment cleaned"
}

# Improved process cleanup with waiting
find_and_kill_dyalog() {
    if pgrep -f "dyalog\|mapl\|aplcicd" &> /dev/null; then
        log_warning "Terminating existing APL processes..."
        pkill -f "dyalog\|mapl\|aplcicd" 2>/dev/null || true
        sleep 3
        
        # Wait for processes to actually die
        local wait_count=0
        while pgrep -f "dyalog\|mapl" >/dev/null 2>&1; do
            if [[ $wait_count -ge 10 ]]; then
                log_warning "Force killing stubborn processes..."
                pkill -9 -f "dyalog\|mapl" 2>/dev/null || true
                break
            fi
            sleep 1
            wait_count=$((wait_count + 1))
        done
    fi
}

# Robust APL command execution with retry logic and exponential backoff
run_apl() {
    local apl_code="$1"
    local description="${2:-Running APL command}"
    local max_retries="${3:-2}"
    local timeout="${4:-10}"
    local retry_count=0
    
    while [[ $retry_count -le $max_retries ]]; do
        log_info "$description (attempt $((retry_count + 1))/$((max_retries + 1)))..."
        
        # Restart Dyalog on retries
        if [[ $retry_count -gt 0 ]]; then
            restart_dyalog
        fi
        
        # Create temporary file for APL script with better error handling
        local temp_script="/tmp/aplcicd_$$_$(date +%s).apl"
        echo "$apl_code" > "$temp_script"
        # Execute APL code with timeout  
        "$DYALOG_PATH" < "$temp_script" > /tmp/apl_output_$$.txt 2>&1 &
        local apl_pid=$!
        
        # Wait for completion or timeout
        local count=0
        while kill -0 $apl_pid 2>/dev/null; do
            sleep 1
            count=$((count + 1))
            if [[ $count -ge $timeout ]]; then
                kill $apl_pid 2>/dev/null
                wait $apl_pid 2>/dev/null
                break
            fi
        done
        
        # Get the output
        output=$(cat /tmp/apl_output_$$.txt 2>/dev/null)
        rm -f /tmp/apl_output_$$.txt
        exit_code=0
        
        # Clean up temporary file
        rm -f "$temp_script"
        
        # Check for success indicators and absence of error indicators
        success_pattern="APLCICD.*System Status\|Health Status: OK\|Status: OK\|✅.*ready\|🚀.*APLCICD\|✅.*loaded\|Test completed successfully\|Performance Benchmark\|🏆.*CONTEST DEMONSTRATION\|🎯.*PART.*RESULTS\|Thank you, judges\|PART.*RESULTS.*demonstrated\|Meta-programming capabilities demonstrated\|Live pipeline visualization completed\|🎯 CONTEST ACHIEVEMENT\|📊 REAL SYSTEM STATISTICS"
        
        if echo "$output" | grep -q "$success_pattern"; then
            # Check for fatal errors only (ignore trace output from TRACE_ON_ERROR)
            if ! echo "$output" | grep -q "SYNTAX ERROR.*\|VALUE ERROR.*\|WS FULL.*\|INTERRUPT.*"; then
                # Display the actual APL output for impressive content
                echo ""
                echo "$output"
                echo ""
                log_success "$description completed"
                return 0
            fi
        fi
        
        retry_count=$((retry_count + 1))
        if [[ $retry_count -le $max_retries ]]; then
            # Exponential backoff: 2^retry_count seconds
            local wait_time=$((2 ** retry_count))
            log_warning "$description failed, retrying in ${wait_time}s..."
            sleep "$wait_time"
        fi
    done
    
    log_error "$description failed after $((max_retries + 1)) attempts"
    return 1
}

# Validate demo environment before running
validate_demo_environment() {
    log_info "Validating demo environment..."
    
    # Check all required files exist
    local required_files=("src/APLCICD.dyalog" "src/Pipeline.dyalog" "config/default.json")
    for file in "${required_files[@]}"; do
        if [[ ! -e "$file" ]]; then
            log_error "Required file missing: $file"
            return 1
        fi
    done
    
    # Check required directories exist
    local required_dirs=("src" "config")
    for dir in "${required_dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            log_error "Required directory missing: $dir"
            return 1
        fi
    done
    
    # Test Dyalog responds
    log_info "Testing Dyalog APL response..."
    # Use timeout if available, otherwise use a simpler test
    if command -v timeout >/dev/null 2>&1; then
        if ! echo "⎕←'APLCICD_TEST'" | timeout 10 "$DYALOG_PATH" 2>/dev/null | grep -q "APLCICD_TEST"; then
            log_error "Dyalog APL not responding correctly"
            return 1
        fi
    elif command -v gtimeout >/dev/null 2>&1; then
        if ! echo "⎕←'APLCICD_TEST'" | gtimeout 10 "$DYALOG_PATH" 2>/dev/null | grep -q "APLCICD_TEST"; then
            log_error "Dyalog APL not responding correctly"
            return 1
        fi
    else
        # Fallback: skip detailed test on macOS without timeout
        log_warning "APL response test skipped (timeout not available on this system)"
    fi
    
    # Check source files are valid APL
    local apl_files=(src/*.dyalog)
    for file in "${apl_files[@]}"; do
        if [[ -f "$file" ]] && ! grep -q ":Namespace\|∇" "$file"; then
            log_warning "APL file may be invalid: $file"
        fi
    done
    
    log_success "Demo environment validation passed"
    return 0
}

# Initialize system and check requirements
initialize() {
    log_header "APLCICD v$SCRIPT_VERSION - Self-Improving APL CI/CD System"
    echo "Dyalog APL Forge Contest 2025"
    echo ""
    
    # Find Dyalog
    DYALOG_PATH=$(find_dyalog)
    if [[ -z "$DYALOG_PATH" ]]; then
        log_error "Dyalog APL not found!"
        echo "Please install Dyalog APL 19.0+ or set DYALOG environment variable"
        echo "Download from: https://www.dyalog.com/download-zone.htm"
        exit 1
    fi
    
    log_success "Found Dyalog APL: $DYALOG_PATH"
    
    # Validate demo environment
    validate_demo_environment
    
    # Ensure directories exist
    mkdir -p logs config
    
    # Clean start
    restart_dyalog
    
    log_success "System initialized"
}


# Run APL CI/CD demo
run_demo() {
    log_header "Contest Demonstration"
    
    local apl_demo_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.Demo
⎕OFF"
    
    run_apl "$apl_demo_code" "Contest demonstration"
}


# Run performance benchmark
run_benchmark() {
    log_header "APL-CD Performance Benchmark vs Traditional CI/CD"
    
    local apl_benchmark_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
Benchmark.BenchmarkDemo
⎕OFF"
    
    run_apl "$apl_benchmark_code" "APL-CD performance benchmarking"
}

# Run system status check
run_status() {
    log_header "System Status"
    
    local apl_status_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.Status
⎕OFF"
    
    run_apl "$apl_status_code" "System status check"
}

# Run complete CI/CD pipeline
run_pipeline() {
    log_header "CI/CD Pipeline Execution"
    
    local apl_pipeline_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.TestCI
⎕OFF"
    
    run_apl "$apl_pipeline_code" "CI/CD pipeline execution"
}

# Run real implementation demo
run_real_demo() {
    log_header "Real Implementation Demo"
    
    local apl_real_demo_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.RealDemo
⎕OFF"
    
    run_apl "$apl_real_demo_code" "Real implementation demo"
}

# Self-optimization process
run_self_optimize() {
    log_header "Self-Optimization Process"
    
    local apl_optimize_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.SelfOptimize
⎕OFF"
    
    run_apl "$apl_optimize_code" "Self-optimization process"
}


run_recursive_demo() {
    log_header "Recursive Self-Testing"
    run_apl_script "final_recursive_demo.apl" "Recursive self-testing"
}

# Run APL script directly
run_apl_script() {
    local script_file="$1"
    local description="$2"
    
    if [[ ! -f "$script_file" ]]; then
        log_error "Script file not found: $script_file"
        return 1
    fi
    
    log_header "$description"
    log_info "Running script: $script_file"
    
    if command -v dyalog >/dev/null 2>&1; then
        dyalog -script "$script_file"
        if [[ $? -eq 0 ]]; then
            log_success "$description completed"
        else
            log_error "$description failed"
            return 1
        fi
    else
        log_error "Dyalog APL not found. Please install Dyalog APL."
        return 1
    fi
}

run_competition_server() {
    log_header "Competition Web Server"
    
    local apl_server_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.LoadAdvancedModules
APLCICD.CompetitionServer
⎕OFF"
    
    run_apl "$apl_server_code" "Competition web server"
}


run_project_analysis_demo() {
    log_header "ProjectLoader External Analysis Demo"
    
    local apl_project_analysis_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.ProjectAnalysisDemo
⎕OFF"
    
    run_apl "$apl_project_analysis_code" "ProjectLoader external analysis demo"
}

run_monitoring_demo() {
    log_header "RealMonitor Live Monitoring Demo"
    
    local apl_monitoring_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.RealMonitoringDemo
⎕OFF"
    
    run_apl "$apl_monitoring_code" "RealMonitor live monitoring demo"
}

run_integrated_demo() {
    log_header "Integrated APLCICD Demonstration"
    
    local apl_integrated_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.IntegratedDemo
⎕OFF"
    
    run_apl "$apl_integrated_code" "Integrated demonstration"
}


run_monitoring_stats() {
    log_header "Platform Monitoring Statistics"
    
    local apl_stats_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.MonitoringStats
⎕OFF"
    
    run_apl "$apl_stats_code" "Platform monitoring statistics"
}

# Run Jenkins comparison demo
run_jenkins_comparison() {
    local project_path="${1:-src}"
    log_header "APL-CD vs Jenkins Performance Comparison"
    
    run_apl_script "mcp-demos/demo-scripts/jenkins_comparison_demo.apl" "Jenkins performance comparison"
}

# Run real-world bake-off
run_real_world_bakeoff() {
    local project_path="${1:-.}"
    log_header "Real-World Bake-off: APL-CD vs Jenkins"
    
    run_apl_script "mcp-demos/demo-scripts/real_bakeoff_simple.apl" "Real-world enterprise project comparison"
}

# Run Spring PetClinic benchmark
run_spring_petclinic_benchmark() {
    log_header "Spring PetClinic Industry-Standard Benchmark"
    
    # Check if Spring PetClinic is cloned
    if [[ ! -d "external_benchmark/spring-petclinic" ]]; then
        log_info "Cloning Spring PetClinic benchmark project..."
        git clone https://github.com/spring-projects/spring-petclinic.git external_benchmark/spring-petclinic
    fi
    
    run_apl_script "mcp-demos/demo-scripts/spring_petclinic_simple.apl" "Spring PetClinic industry-standard benchmark"
}


run_test_self() {
    log_header "Self-Testing Showcase"
    
    local apl_self_test_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.TestPipelineOnItself
⎕OFF"
    
    run_apl "$apl_self_test_code" "Self-testing showcase"
}

run_complete_competition_demo() {
    log_header "Complete Competition Demonstration"
    
    local apl_complete_code="⎕FIX'file://src/APLCICD.dyalog'
APLCICD.Initialize
APLCICD.LoadAdvancedModules
result ← APLCICD.CompleteCompetitionDemo
⎕←'🏆 Competition demonstration complete!'
⎕OFF"
    
    run_apl "$apl_complete_code" "Complete competition demo"
}


# Complete system demonstration (combination of key features)
run_complete_demo() {
    log_header "Complete APLCICD System Demonstration"
    
    log_info "Running comprehensive system demo..."
    
    # 1. System status
    run_status
    echo ""
    
    
    # 3. Real implementation demo
    run_real_demo
    echo ""
    
    # 4. Dashboard note (HTMLRenderer removed for compatibility)
    log_info "Dashboard functionality available via text-based interface"
    echo ""
    
    # 5. Run pipeline test
    run_pipeline
    echo ""
    
    # 6. Advanced module demonstrations
    log_info "Demonstrating advanced modules..."
    run_project_analysis_demo
    echo ""
    
    run_monitoring_demo
    echo ""
    
    log_success "Complete demonstration finished!"
    echo ""
    echo "🎯 Key Achievements Demonstrated:"
    echo "   ✅ Self-improving CI/CD pipeline"
    echo "   ✅ Real-time monitoring and logging"
    echo "   ✅ Meta-programming capabilities"
    echo "   ✅ Production-ready architecture"
    echo "   ✅ Zero-mock implementation"
    echo "   ✅ External project analysis capabilities"
    echo "   ✅ Live system monitoring and metrics"
    echo "   ✅ Integrated ProjectLoader + RealMonitor workflow"
}

# Show help
show_help() {
    cat << EOF
🚀 APL-CD v$SCRIPT_VERSION - Array-Oriented Dependency Resolution
================================================================
APL Forge Contest 2025 - Mathematical Innovation

Usage: ./aplcicd [command] [options]

Essential Commands:
  test              - Comprehensive system demonstration 
  demo              - Contest demonstration with array operations
  status            - System health and module status

Technical Demos:
  finale            - 5-minute technical demonstration
  5min              - Same as finale command
  benchmark         - O(N²) vs O(N³) algorithmic complexity proof
  integration       - Mathematical analysis demonstration

Development Commands:
  pipeline          - CI/CD pipeline execution
  stats             - System statistics and monitoring
  compare-with-jenkins [path] - Performance comparison with Jenkins
  bake-off [path]   - Real-world enterprise project comparison
  spring-petclinic  - Industry-standard Maven benchmark (Spring Boot)

Examples:
  ./setup && ./aplcicd finale                    # One-liner setup and demo  
  ./aplcicd finale                               # 5-minute technical demonstration
  ./aplcicd benchmark                            # Algorithmic complexity proof
  ./aplcicd demo                                 # Array operations demonstration

Key Features:
  🔢 O(N²) Dependency Resolution (matrix operations vs O(N³) graph traversal)
  ⚡ Array-Oriented Parallel Execution (vectorized task scheduling)
  📊 Mathematical Optimization (topological sorting with APL arrays)
  🔄 Recursive Self-Analysis (system analyzing its own codebase)
  🏆 Technical Demonstrations (5 polished demo scripts)
  🤖 Self-Health Monitoring (module status and performance tracking)

Architecture:
  • 3 Core Modules: DependencyMatrix, ParallelPipeline, Pipeline
  • 5 Demo Scripts: Ready for technical evaluation
  • 21 Executable Files: Complete working system

System Requirements:
  • Dyalog APL 19.0+ (automatically detected)
  • Unix-like system (macOS/Linux/WSL)
  • Git (for repository operations)

Quick Start:
  1. chmod +x aplcicd
  2. ./aplcicd test
  3. ./aplcicd pipeline  (run full CI/CD with monitoring)
  4. ./aplcicd stats     (view usage analytics and trends)

For Interactive Use:
  ⎕FIX'file://src/APLCICD.dyalog'
  APLCICD.Initialize
  APLCICD.TestCI              ⍝ Run full CI/CD pipeline
  APLCICD.MonitoringStats     ⍝ View usage analytics
  APLCICD.Demo                ⍝ Array-oriented demonstration

Repository: https://github.com/jcfield-boop/aplipeline
Contest: Dyalog APL Forge 2025 - Array Processing Category
EOF
}

# Main command processing
main() {
    # Initialize system
    initialize
    
    # Parse command
    local cmd="${1:-help}"
    
    case "$cmd" in
        # Tier 1 - Essential Commands
        "test")
            run_complete_demo
            ;;
        "demo")
            run_demo
            ;;
        "status")
            run_status
            ;;
        
        # Tier 2 - Development Commands  
        "pipeline")
            run_pipeline
            ;;
        "benchmark")
            run_benchmark
            ;;
        
        # Tier 3 - Advanced Commands
        "optimize")
            run_self_optimize
            ;;
        "dashboard")
            log_info "Dashboard requires HTMLRenderer dependency"
            log_info "Use './aplcicd status' for text-based interface"
            ;;
        "stats")
            run_monitoring_stats
            ;;
        "compare-with-jenkins")
            run_jenkins_comparison "${2:-src}"
            ;;
        "bake-off"|"bakeoff")
            run_real_world_bakeoff "${2:-.}"
            ;;
        "spring-petclinic"|"petclinic")
            run_spring_petclinic_benchmark
            ;;
        
        # Legacy commands for backward compatibility
        "complete"|"full")
            run_complete_demo
            ;;
        "realdemo")
            run_real_demo
            ;;
        "selfoptimize")
            run_self_optimize
            ;;
        "recursive")
            run_recursive_demo
            ;;
        "finale"|"5min")
            run_apl_script "mcp-demos/demo-scripts/simple_5min_demo.apl" "5-minute technical demonstration"
            ;;
        "benchmark")
            run_apl_script "mcp-demos/demo-scripts/simple_benchmark.apl" "O(N²) vs O(N³) performance comparison"
            ;;
        "integration")
            run_apl_script "mcp-demos/demo-scripts/integration_example.apl" "APL Forge submission analysis"
            ;;
        "direct")
            run_apl_script "mcp-demos/demo-scripts/direct_demo.apl" "Direct working system demo"
            ;;
        "competition")
            run_competition_server
            ;;
        "complete-demo")
            run_complete_competition_demo
            ;;
        "project-analysis")
            run_project_analysis_demo
            ;;
        "monitoring")
            run_monitoring_demo
            ;;
        "integrated")
            run_integrated_demo
            ;;
        "test-self"|"self-test")
            run_test_self
            ;;
        "restart")
            restart_dyalog
            log_success "Dyalog APL restarted"
            ;;
        "help"|"-h"|"--help"|*)
            show_help
            ;;
    esac
}

# Handle script interruption
trap 'log_warning "Script interrupted"; exit 1' INT TERM

# Run main function with all arguments
main "$@"