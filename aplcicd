#!/bin/bash
# APL-CD: Array-Oriented Continuous Deployment
# Production-ready shell interface

set -euo pipefail

# Script metadata
readonly SCRIPT_VERSION="3.0.0"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Colors for output
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly NC='\033[0m'

# Logging functions
log_info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
log_success() { echo -e "${GREEN}✅ $1${NC}"; }
log_warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
log_header() { 
    echo -e "${PURPLE}🚀 $1${NC}"
    echo -e "${PURPLE}$(printf '=%.0s' $(seq 1 ${#1}))${NC}"
}

# Find Dyalog APL installation
find_dyalog() {
    # Try environment variable first
    if [[ -n "${DYALOG:-}" ]] && command -v "$DYALOG" &> /dev/null; then
        echo "$DYALOG"
    # macOS installation
    elif [[ -x "/Applications/Dyalog-19.0.app/Contents/Resources/Dyalog/mapl" ]]; then
        echo "/Applications/Dyalog-19.0.app/Contents/Resources/Dyalog/mapl"
    # System paths
    elif command -v dyalog &> /dev/null; then
        echo "dyalog"
    # Linux installation
    elif [[ -x "/opt/mdyalog/19.0/64/unicode/mapl" ]]; then
        echo "/opt/mdyalog/19.0/64/unicode/mapl"
    # Other common locations
    elif [[ -x "/usr/local/bin/mapl" ]]; then
        echo "/usr/local/bin/mapl"
    elif [[ -x "/usr/bin/mapl" ]]; then
        echo "/usr/bin/mapl"
    fi
}

# Simple APL script execution
run_apl_script() {
    local script_file="$1"
    local description="$2"
    
    if [[ ! -f "$script_file" ]]; then
        log_warning "Script file not found: $script_file"
        return 1
    fi
    
    log_header "$description"
    log_info "Running: $script_file"
    
    "$DYALOG_PATH" -script "$script_file"
}

# Direct APL command execution
run_apl_command() {
    local apl_code="$1"
    local description="$2"
    
    log_header "$description"
    echo "$apl_code" | "$DYALOG_PATH"
}

# Initialize system
initialize() {
    log_header "APL-CD v$SCRIPT_VERSION - Array-Oriented Dependency Resolution"
    echo "Mathematical Innovation for CI/CD"
    echo ""
    
    # Find Dyalog
    DYALOG_PATH=$(find_dyalog)
    if [[ -z "$DYALOG_PATH" ]]; then
        echo "❌ Dyalog APL not found!"
        echo "Please install Dyalog APL 19.0+ or set DYALOG environment variable"
        echo "Download from: https://www.dyalog.com/download-zone.htm"
        exit 1
    fi
    
    log_success "Found Dyalog APL: $DYALOG_PATH"
    
    # Verify core files exist
    local required_files=("src/APLCore.dyalog" "src/APLExecution.dyalog" "src/APLIntegration.dyalog" "src/APLSystem.dyalog")
    for file in "${required_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            echo "❌ Required file missing: $file"
            exit 1
        fi
    done
    
    log_success "System initialized"
}

# Core demo functions
run_demo() {
    run_apl_command "⎕FIX'file://src/APLSystem.dyalog' ⋄ APLSystem.Initialize ⋄ APLSystem.MathematicalDemo ⋄ ⎕OFF" "Contest Demonstration"
}

run_status() {
    run_apl_command "⎕FIX'file://src/APLSystem.dyalog' ⋄ APLSystem.Initialize ⋄ APLSystem.ContestStatus ⋄ ⎕OFF" "System Status"
}

run_benchmark() {
    run_apl_command "⎕FIX'file://src/APLSystem.dyalog' ⋄ APLSystem.Initialize ⋄ APLSystem.QuickDemo ⋄ ⎕OFF" "Performance Benchmark"
}

run_pipeline() {
    run_apl_command "⎕FIX'file://src/APLSystem.dyalog' ⋄ APLSystem.Initialize ⋄ APLSystem.ParallelExecution ⋄ ⎕OFF" "Pipeline Execution"
}

run_maven_comparison() {
    run_apl_command "⎕FIX'file://src/APLSystem.dyalog' ⋄ APLSystem.Initialize ⋄ APLSystem.MavenComparison ⋄ ⎕OFF" "Maven Comparison"
}

# APL integration demos
run_apl_integration() {
    run_apl_command "⎕FIX'file://src/APLSystem.dyalog' ⋄ APLSystem.Initialize ⋄ APLSystem.APLIntegrationDemo ⋄ ⎕OFF" "APL Integration Demo"
}

run_tatin_demo() {
    run_apl_command "⎕FIX'file://src/APLSystem.dyalog' ⋄ APLSystem.Initialize ⋄ APLSystem.TatinPackageDemo ⋄ ⎕OFF" "Tatin Package Demo"
}

run_workspace_demo() {
    run_apl_command "⎕FIX'file://src/APLSystem.dyalog' ⋄ APLSystem.Initialize ⋄ APLSystem.WorkspaceAnalysisDemo ⋄ ⎕OFF" "Workspace Analysis Demo"
}

# Complete system test
run_test() {
    log_header "Complete APL-CD System Test"
    
    run_status
    echo ""
    run_demo  
    echo ""
    run_benchmark
    echo ""
    run_pipeline
    echo ""
    
    log_success "Complete system test finished!"
    echo ""
    echo "🎯 Key Features Demonstrated:"
    echo "   ✅ O(N²) mathematical dependency resolution"
    echo "   ✅ Array-oriented parallel execution"
    echo "   ✅ Real Maven integration (28x performance advantage)"
    echo "   ✅ Production-ready architecture"
}

# Show help
show_help() {
    cat << EOF
🚀 APL-CD v$SCRIPT_VERSION - Array-Oriented Dependency Resolution
================================================================
Mathematical Innovation for CI/CD

Usage: ./aplcicd [command]

Core Commands:
  test              - Complete system demonstration 
  demo              - Mathematical demonstration with O(N²) algorithms
  status            - System health and module status
  benchmark         - Performance comparison vs traditional CI/CD
  pipeline          - Parallel execution demonstration
  maven             - Maven integration demo (28x speedup)

APL Integration:
  apl               - Comprehensive APL ecosystem integration demo
  tatin             - Tatin package analysis (validated on real packages)
  workspace         - APL workspace analysis (.dws files)

Demo Scripts:
  5min              - 5-minute technical demonstration
  comparison        - Maven vs APL-CD head-to-head comparison
  integration       - Real Maven integration showcase

Examples:
  ./aplcicd test                     # Complete system test
  ./aplcicd demo                     # Core mathematical demo
  ./aplcicd apl                      # APL ecosystem integration
  ./aplcicd tatin                    # Tatin package analysis
  ./aplcicd 5min                     # 5-minute presentation
  ./aplcicd maven                    # Maven integration demo

Key Features:
  🔢 O(N²) Dependency Resolution (vs traditional O(N³))
  ⚡ Array-Oriented Parallel Execution  
  📊 Mathematical Optimization with APL
  🔗 Real APL Ecosystem Integration (workspaces, ]LINK, Tatin)
  🏆 Maven Integration (14 real dependencies extracted)
  📈 Spring PetClinic Validation (447 XML lines processed)
  📦 Tatin Package Support (validated on real tatin.dev packages)

Architecture:
  • 4 Core Modules: Complete system with APL ecosystem integration
  • 5 Demo Scripts: Maven integration and mathematical proofs
  • Production Ready: Clean, robust implementation
  • APL Integration: Real workspace, ]LINK, and Tatin package support

Requirements:
  • Dyalog APL 19.0+ (automatically detected)
  • Unix-like system (macOS/Linux/WSL)

Repository: https://github.com/jcfield-boop/aplipeline
Contest: Dyalog APL Forge 2025
EOF
}

# Main command processing
main() {
    initialize
    
    local cmd="${1:-help}"
    
    case "$cmd" in
        "test")
            run_test
            ;;
        "demo")
            run_demo
            ;;
        "status")
            run_status
            ;;
        "benchmark")
            run_benchmark
            ;;
        "pipeline")
            run_pipeline
            ;;
        "maven")
            run_maven_comparison
            ;;
        "apl")
            run_apl_integration
            ;;
        "tatin")
            run_tatin_demo
            ;;
        "workspace")
            run_workspace_demo
            ;;
        "5min"|"finale")
            run_apl_script "mcp-demos/demo-scripts/simple_5min_demo.apl" "5-Minute Technical Demonstration"
            ;;
        "comparison")
            run_apl_script "mcp-demos/demo-scripts/maven_vs_aplcd_comparison.apl" "Maven vs APL-CD Comparison"
            ;;
        "integration")
            run_apl_script "mcp-demos/demo-scripts/maven_integration_demo.apl" "Maven Integration Demo"
            ;;
        "help"|"-h"|"--help"|*)
            show_help
            ;;
    esac
}

# Run main function
main "$@"