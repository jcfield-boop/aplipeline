name: APL CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, master]

jobs:
  apl-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Dyalog APL
      run: |
        # For demonstration - replace with actual Dyalog installation
        echo "Setting up Dyalog APL environment..."
        # Download and install Dyalog APL (requires license)
        # wget https://download.dyalog.com/...
        
    - name: Run APL CI/CD Analysis
      run: |
        echo "Running APL CI/CD analysis on changed files..."
        
        # Get changed files
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
        else
          CHANGED_FILES=$(git diff --name-only HEAD^)
        fi
        
        echo "Changed files: $CHANGED_FILES"
        
        # For demo purposes, create mock results
        cat > apl-cicd-results.json << 'EOF'
        {
          "ai_model": "Claude",
          "ai_score": 0.85,
          "security_score": 0.92,
          "performance_score": 0.88,
          "overall_status": true,
          "files_analyzed": 3,
          "processing_time": 150,
          "lint_passed": true,
          "tests_passed": true,
          "build_success": true,
          "confidence": 0.94
        }
        EOF
        
        echo "APL CI/CD analysis complete!"
        
    - name: Post Results to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('apl-cicd-results.json'));
          
          const aiEmoji = {
            'Claude': '🧠',
            'GPT': '🤖', 
            'Copilot': '👨‍💻',
            'Human': '👤'
          }[results.ai_model] || '❓';
          
          const statusEmoji = results.overall_status ? '✅' : '❌';
          
          const comment = `## ${statusEmoji} APL CI/CD Analysis Results

          🤖 **AI Detection**: ${aiEmoji} ${results.ai_model} (confidence: ${results.confidence})
          📊 **AI Score**: ${results.ai_score}/1.0
          🛡️ **Security**: ${results.security_score > 0.7 ? '✅' : '❌'} Score: ${results.security_score}
          ⚡ **Performance**: ${'█'.repeat(Math.floor(results.performance_score * 8))} ${results.performance_score}
          🔍 **Code Quality**: Lint ${results.lint_passed ? '✅' : '❌'} Tests ${results.tests_passed ? '✅' : '❌'} Build ${results.build_success ? '✅' : '❌'}

          ${results.ai_score > 0.5 ? '> 🚨 **High AI Content Detected** - This PR contains significant AI-generated code. Please review carefully.\n' : ''}
          📈 **Processing Stats**: ${results.processing_time}ms | ${results.files_analyzed} files analyzed
          🔗 **Powered by**: [APL CI/CD](https://github.com/jcfield-boop/aplipeline) | 🏆 Dyalog APL Forge Contest 2024`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: Update Commit Status
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('apl-cicd-results.json'));
          
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: results.overall_status ? 'success' : 'failure',
            description: `APL CI/CD: ${results.ai_model} detected, score ${results.ai_score}`,
            context: 'APL CI/CD Pipeline'
          });
          
    - name: Add AI Label
      if: github.event_name == 'pull_request' && fromJSON(env.AI_SCORE) > 0.7
      env:
        AI_SCORE: ${{ env.AI_SCORE }}
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['ai-generated']
          });