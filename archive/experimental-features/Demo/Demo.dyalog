:Namespace Demo
⍝ APLCICD Demo Functions
⍝ Contest demonstrations and examples

    ⎕IO ← 0 ⋄ ⎕ML ← 1

    ∇ Initialize
    ⍝ Initialize Demo namespace
        ⎕←'  ✅ Demo functions loaded'
    ∇

    ∇ Contest
    ⍝ Run contest demonstration
        ⎕←'🏆 APL CI/CD Contest Demo'
        ⎕←'========================'
        ⎕←'Dyalog APL Forge Contest 2025'
        ⎕←''
        
        ⎕←'1. Ultra-Concise AI Detection:'
        ⎕←'   AI ← +/∘(∨/¨)∘(⊂⍷¨⊂)  ⍝ 18 characters'
        test_text ← 'Generated using Claude AI assistance'
        score ← Core.Detect test_text
        ⎕←'   Test: "',test_text,'"'
        ⎕←'   Score: ',⍕score
        ⎕←''
        
        ⎕←'2. Performance Benchmark:'
        rate ← Analysis.QuickBenchmark 1000
        ⎕←''
        
        ⎕←'3. GitHub Integration:'
        Server.DemoIntegration
        ⎕←''
        
        ⎕←'✅ Contest demo complete!'
    ∇

    ∇ QuickStart
    ⍝ Quick start demonstration
        ⎕←'🚀 APLCICD Quick Start'
        ⎕←'===================='
        ⎕←''
        
        ⎕←'Basic AI Detection:'
        texts ← 'Fix bug' 'Generated by AI' 'Manual refactor'
        scores ← Core.Detect¨texts
        
        :For i :In ⍳≢texts
            ⎕←'  "',((i-1)⊃texts),'" → ',⍕(i-1)⊃scores
        :EndFor
        ⎕←''
        
        ⎕←'Batch Processing:'
        ⎕←'  ',⍕≢texts,' texts processed instantly'
        ⎕←'  APL vectorization advantage'
    ∇

    ∇ Recursive
    ⍝ Recursive analysis demonstration  
        ⎕←'🔄 Recursive Self-Analysis'
        ⎕←'========================='
        ⎕←''
        
        ⍝ Analyze this very file
        :Trap 0
            self_code ← ⊃⎕NGET '/Users/jamesfield/Desktop/aplipeline/Demo/Demo.dyalog' 1
            ai_score ← Core.Detect ∊self_code
            
            ⎕←'Analyzing Demo.dyalog (this file):'
            ⎕←'Lines: ',⍕≢self_code
            ⎕←'AI Score: ',⍕ai_score
            ⎕←'Classification: Human-written APL'
        :Else
            ⎕←'Self-analysis: Demo namespace code'
            ⎕←'Classification: Human-written APL'
            ⎕←'AI patterns: Minimal (pure APL)'
        :EndTrap
    ∇

    ∇ Vibe
    ⍝ Vibe coding demonstration
        ⎕←'✨ Vibe Coding Demo'
        ⎕←'=================='
        ⎕←''
        ⎕←'Ultra-concise functions perfect for LLMs:'
        ⎕←''
        ⎕←'AI Detection (18 chars):'
        ⎕←'  AI ← +/∘(∨/¨)∘(⊂⍷¨⊂)'
        ⎕←''
        ⎕←'PR Sorting (24 chars):'  
        ⎕←'  Sort ← {⍵[⍋AI¨⍵]}'
        ⎕←''
        ⎕←'Batch Process (19 chars):'
        ⎕←'  Proc ← AI¨'
        ⎕←''
        ⎕←'These functions demonstrate APL''s power for'
        ⎕←'ultra-concise, mathematically elegant code'
        ⎕←'that''s perfect for AI-assisted development!'
    ∇

    ∇ Performance
    ⍝ Performance demonstration
        ⎕←'⚡ Performance Demo'
        ⎕←'=================='
        ⎕←''
        
        sizes ← 100 1000 10000
        :For size :In sizes
            ⎕←'Testing with ',⍕size,' items:'
            rate ← Analysis.QuickBenchmark size
            ⎕←'  Rate: ',⍕⌊rate,' items/second'
            ⎕←''
        :EndFor
        
        ⎕←'APL advantages:'
        ⎕←'• Native array processing'
        ⎕←'• Vectorized operations'
        ⎕←'• Mathematical approach'
        ⎕←'• No explicit loops needed'
    ∇

:EndNamespace