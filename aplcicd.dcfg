{
  "name": "APL-CD",
  "version": "3.0.0",
  "description": "First mathematical approach to dependency resolution - O(N²) matrix operations vs O(N³) graph algorithms with 28x performance advantage and exponential scaling",
  "author": "APL Forge Contest 2025",
  "license": "MIT",
  "dyalog_version": "19.0",
  "main": "./src/APLSystem.dyalog",
  "startup": "APLSystem.Initialize",
  "target": "1",
  "dependencies": {
    "Conga": "*",
    "HttpCommand": "*"
  },
  "optional_dependencies": {
    "JSONlib": "*"
  },
  "core_modules": {
    "APLCore": "./src/APLCore.dyalog",
    "APLExecution": "./src/APLExecution.dyalog",
    "APLIntegration": "./src/APLIntegration.dyalog",
    "APLSystem": "./src/APLSystem.dyalog"
  },
  "exports": {
    "APLCore": "./src/APLCore.dyalog",
    "APLExecution": "./src/APLExecution.dyalog",
    "APLIntegration": "./src/APLIntegration.dyalog",
    "APLSystem": "./src/APLSystem.dyalog"
  },
  "api": {
    "entry_points": [
      "APLSystem.Initialize",
      "APLSystem.ContestStatus",
      "APLSystem.MathematicalDemo",
      "APLSystem.MavenComparison",
      "APLSystem.ParallelExecution",
      "APLSystem.APLIntegrationDemo",
      "APLSystem.TatinPackageDemo",
      "APLSystem.WorkspaceAnalysisDemo",
      "APLSystem.QuickDemo",
      "APLCore.BuildDependencyMatrix",
      "APLCore.TopologicalSort", 
      "APLCore.FindParallelTasks",
      "APLCore.DetectCycles",
      "APLCore.ParseMavenPOM",
      "APLCore.ExtractMavenDependencies",
      "APLCore.ParseProjectDependencies",
      "APLIntegration.AnalyzeWorkspace",
      "APLIntegration.ParseLINKConfig",
      "APLIntegration.ExtractNamespaceHierarchy",
      "APLIntegration.ParseTatinPackage",
      "APLIntegration.AnalyzeDynamicAPL",
      "APLIntegration.AnalyzeAPLProject",
      "APLExecution.ExecuteParallel",
      "APLExecution.ParallelExecutionDemo"
    ],
    "demo_scripts": [
      "mcp-demos/demo-scripts/simple_5min_demo.apl",
      "mcp-demos/demo-scripts/maven_integration_demo.apl",
      "mcp-demos/demo-scripts/maven_vs_aplcd_comparison.apl",
      "mcp-demos/demo-scripts/focused_recursive_test.apl"
    ],
    "maven_core_functions": [
      "APLCore.ParseMavenPOM - Core Maven POM parsing function",
      "APLCore.ExtractMavenDependencies - Real XML DOM parsing in core",
      "APLCore.ParseProjectDependencies - Auto-detection with Maven support"
    ],
    "contest_demonstrations": [
      "APLSystem.MathematicalDemo - O(N²) algorithms demonstration",
      "APLSystem.MavenComparison - Real Maven vs APL-CD performance", 
      "APLSystem.ParallelExecution - Array-oriented parallel execution",
      "APLSystem.APLIntegrationDemo - Real workspace, ]LINK, namespace analysis",
      "APLSystem.TatinPackageDemo - Tatin package dependency resolution",
      "APLSystem.WorkspaceAnalysisDemo - Real .dws workspace introspection",
      "APLSystem.QuickDemo - 2-minute mathematical overview"
    ],
    "apl_integration_functions": [
      "APLIntegration.AnalyzeWorkspace - Real .dws workspace analysis using ⎕LOAD",
      "APLIntegration.ParseLINKConfig - ]LINK configuration & source mapping",
      "APLIntegration.ExtractNamespaceHierarchy - Parent-child namespace relationships",
      "APLIntegration.ParseTatinPackage - Real package.dcfg parsing & dependencies",
      "APLIntegration.AnalyzeDynamicAPL - ⎕FIX/⎕COPY expression handling",
      "APLIntegration.AnalyzeAPLProject - Comprehensive APL-aware analysis"
    ]
  },
  "config": {
    "log_level": "info",
    "benchmark_mode": true
  },
  "files": {
    "include": [
      "src/*.dyalog",
      "README.md",
      "docs/*.md",
      "mcp-demos/**",
      "spring-petclinic/**"
    ],
    "exclude": [
      "*.tmp",
      "*.log",
      "*.bak",
      "aplcore",
      "mcp-demos/mcp-server/node_modules",
      "mcp-demos/mcp-server/dist"
    ]
  },
  "scripts": {
    "test": "./aplcicd test",
    "demo": "./aplcicd demo", 
    "status": "./aplcicd status",
    "benchmark": "./aplcicd benchmark",
    "finale": "dyalog -script mcp-demos/demo-scripts/simple_5min_demo.apl",
    "5min": "dyalog -script mcp-demos/demo-scripts/simple_5min_demo.apl",
    "maven-integration": "dyalog -script mcp-demos/demo-scripts/maven_integration_demo.apl",
    "maven-comparison": "dyalog -script mcp-demos/demo-scripts/maven_vs_aplcd_comparison.apl",
    "setup-claude": "mcp-demos/setup-claude-desktop.sh"
  },
  "keywords": [
    "APL", 
    "Array-Oriented Programming",
    "Dependency Resolution",
    "Matrix Operations", 
    "O(N²) Algorithms",
    "Mathematical Optimization",
    "Topological Sorting",
    "Spring PetClinic Benchmark",
    "Maven Integration",
    "Dyalog APL",
    "Performance Benchmarking",
    "MCP",
    "Claude Desktop",
    "APL Workspaces",
    "]LINK Integration",
    "Namespace Hierarchy",
    "Tatin Packages",
    "⎕FIX Analysis",
    "⎕COPY Tracking",
    "APL Ecosystem"
  ],
  "homepage": "https://github.com/jcfield-boop/aplipeline",
  "repository": {
    "type": "git",
    "url": "https://github.com/jcfield-boop/aplipeline.git"
  },
  "contest": {
    "name": "Dyalog APL Forge Contest 2025",
    "category": "Technical Innovation",
    "theme": "Array-Oriented Dependency Resolution with Mathematical Innovation",
    "features": [
      "O(N²) dependency resolution using matrix operations vs traditional O(N³) approaches",
      "Universal project analysis via MCP - APL, Maven, Node.js, Python projects",
      "Real Maven integration with XML parsing and performance comparison",
      "Spring PetClinic industry-standard benchmark validation",
      "Matrix-based topological sorting for optimal build order determination",
      "Array-oriented parallel execution with vectorized task scheduling",
      "Claude Desktop integration for natural language project analysis",
      "Real APL workspace analysis using ⎕LOAD and namespace introspection",
      "]LINK configuration parsing and source ↔ workspace mapping",
      "Namespace hierarchy analysis with parent-child relationships",
      "Tatin package system integration with package.dcfg parsing",
      "Dynamic ⎕FIX/⎕COPY expression handling and dependency tracking",
      "Comprehensive APL-aware dependency analysis (not just file listing)",
      "Mathematical validation using linear algebra operations"
    ],
    "innovations": [
      "First dependency resolution system built using APL's array-oriented paradigm",
      "Revolutionary O(N²) vs O(N³) algorithmic complexity improvement", 
      "Mathematical matrix operations for dependency analysis",
      "Real Maven integration with superior performance characteristics",
      "Industry-validated on Spring PetClinic enterprise benchmark",
      "Matrix-based parallel execution planning and optimization"
    ]
  },
  "performance": {
    "dependency_resolution": "O(N²) matrix operations vs O(N³) traditional graph traversal",
    "maven_comparison": "28x performance advantage on Spring PetClinic data with exponential scaling",
    "algorithmic_complexity": "Superior scaling characteristics through matrix operations",
    "memory_efficiency": "Compact matrix storage vs object graph overhead",
    "parallel_execution": "Array-based task grouping with vectorized operations"
  },
  "architecture": {
    "contest_core": "4 complete modules - APLCore (O(N²) algorithms + utilities), APLExecution (parallel + monitoring), APLIntegration (real APL ecosystem support), APLSystem (orchestrator + enterprise)",
    "consolidated_design": "All functionality integrated into focused core modules",
    "demo_scripts": "4 working demonstration scripts including Maven integration",
    "enterprise_validation": "Tested against Spring PetClinic enterprise application", 
    "mathematical_foundation": "Built on matrix operations and array-oriented algorithms",
    "algorithmic_innovation": "First dependency resolution system using array-oriented programming",
    "apl_ecosystem_integration": "Real workspace analysis, ]LINK support, namespace hierarchy, Tatin packages",
    "production_ready": "Clean implementation with robust error handling and testing"
  }
}